---
title: "day3-interactivites"
format: html
editor: visual
---

```{r}
library(palmerpenguins)
library(tidyverse)
```

## Conditional statement

```{r}
temperature <- 95

if (temperature > 97) {
  print ("temperature warning")
} else 
  print ("No. tempature warning")
  
```

Create an if else statement for blue whale lengths. Create a variable blue whale, which has a value of 40. Add an if else statement that returns "GIANT" if the length exceeds 35, "MEDIUM" if the length is between 20 and 35, or "SMALL" if the length is \<= 20.

```{r}

blue_whale <- 15

if (blue_whale > 35) {
  print ("GIANT")
} else if (blue_whale > 20 & blue_whale <=35) {
  print ("MEDIUM")
} else 
  print ("SMALL")
```

## Switch statement

```{r}
housing_type <- "single"
switch(housing_type,
       "single" = print ("400"),
       "double" = print ("750"),
       "whole" = print ("1100"))

if (housing_type == "whole"){
  print ("400")
} else if (housing_type == "double") {
  print ("750")
} else 
  print ("400")
```

## For loops

```{r}
height <- c(58, 61, 65, 72, 89, 94, 106)

for (i in seq_along(height)){
  half_height = height[i] / 2
print(half_height)
}

# For each value in the height vector, return the sum of the value + the one right after it...

for (i in seq_along(height)){
  consecutive_sum = height[i+1] + height [i]
print(consecutive_sum)
}

for (i in seq(1:length(height-1))){
  half_height = height[i] / 2
print(half_height)
}

## Write a for loop that calculates the value at height for each element divided by the mean of the entire height vector 

for (i in seq_along(height)){
  standardize_ht = height[i]/mean(height)
  print(standardize_ht)
}
```

### write a for lop with a conditional (if) statement that returns the mean of all NUMERIC variables in the penguins data set

-   is.numeric (asks is this thing numeric?)

-   mean(vec, na.rm= TRUE)

```{r}
for (i in seq_along(penguins)) {
  if (is.numeric(penguins[[i]])) {
    penguin_mean <- mean(penguins[[i]], na.rm = TRUE)
    print(penguin_mean)
  }
}

```

## Functional programming for easier iteration

Use apply() to iterate over rows or columns, MARGIN = 1 (rows), MARGIN=2 (columns)

```{r}
apply(X=mtcars, MARGIN=2, FUN=median)

apply(mtcars,2,median, na.rm = TRUE)
```

## dplyr::across()

Starter: find the mean flipper length of penguins by species:

```{r}
penguins %>%
  group_by(sex, species) %>%
  summarize(mean_flipper_length_mm = mean(flipper_length_mm, na.rm=TRUE),
            sd_flipper_length = sd(flipper_length_mm, na.rm=TRUE),
            max_body_mass = max(body_mass_g, na.rm=TRUE))
```

```{r}
penguins %>%
  group_by(species, island) %>%
  summarize(across(where(is.numeric), mean, na.rm=TRUE))
```

## Detecting a string pattern

```{r}
food <- "I love enchilades"
str_detect(food, "burritos")
if (str_detect(food, "burritos")) {
  print ("burritos")
} else 
  print ("what about burritos?")
```
